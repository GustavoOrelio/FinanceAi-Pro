// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  password      String
  xp            Int        @default(0)
  monthlyLimit  Float?
  purchases     Purchase[]
  goals         Goal[]
  createdStores Store[]    @relation("CreatedBy")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Store {
  id          String     @id @default(uuid())
  name        String
  description String?
  category    String
  logo        String?
  purchases   Purchase[]
  createdBy   User       @relation("CreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Purchase {
  id              String    @id @default(uuid())
  store           Store     @relation(fields: [storeId], references: [id])
  storeId         String
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  amount          Float
  paidAmount      Float     @default(0)
  remainingAmount Float     @default(0)
  date            DateTime
  category        String
  description     String
  status          String    @default("pending")
  payments        Payment[]
  installments    Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Payment {
  id         String   @id @default(uuid())
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId String
  amount     Float
  method     String
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Goal {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  title         String
  description   String?
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  category      String
  status        String    @default("active")
  createdAt     DateTime  @default(now())
  completedAt   DateTime?
  updatedAt     DateTime  @updatedAt
}
