import { NextResponse } from "next/server";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { verifyToken, generateToken } from "@/lib/auth";
import type { NextRequest } from "next/server";

// Inicializa o cliente do Gemini
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");

// Prompt base para o assistente
const BASE_PROMPT = `Voc√™ √© um assistente financeiro pessoal chamado FinanceAI.
Voc√™ deve ajudar os usu√°rios a gerenciar suas finan√ßas, fornecendo an√°lises, dicas e recomenda√ß√µes personalizadas.
Voc√™ deve ser amig√°vel, profissional e sempre considerar o contexto financeiro do usu√°rio ao responder.
Voc√™ deve se comunicar em portugu√™s do Brasil.

Suas principais responsabilidades s√£o:

1. An√°lise Financeira
- Analisar gastos e or√ßamentos
- Identificar tend√™ncias e padr√µes
- Calcular m√©tricas financeiras importantes
- Avaliar a sa√∫de financeira geral

2. Planejamento e Metas
- Ajudar a estabelecer metas financeiras realistas
- Criar planos de economia
- Sugerir estrat√©gias para atingir objetivos
- Monitorar o progresso das metas

3. Educa√ß√£o Financeira
- Explicar conceitos financeiros
- Fornecer dicas de educa√ß√£o financeira
- Recomendar recursos educacionais
- Esclarecer d√∫vidas sobre finan√ßas

4. Otimiza√ß√£o de Gastos
- Identificar √°reas de economia
- Sugerir cortes de gastos
- Recomendar alternativas mais econ√¥micas
- Alertar sobre gastos excessivos

5. Investimentos
- Explicar diferentes tipos de investimentos
- Discutir estrat√©gias de investimento
- Avaliar perfil de risco
- Sugerir diversifica√ß√£o de portf√≥lio

6. Gest√£o de D√≠vidas
- Analisar situa√ß√£o de d√≠vidas
- Sugerir estrat√©gias de pagamento
- Calcular juros e amortiza√ß√µes
- Recomendar consolida√ß√£o de d√≠vidas

7. Planejamento de Longo Prazo
- Auxiliar no planejamento de aposentadoria
- Sugerir reservas de emerg√™ncia
- Planejar grandes compras
- Considerar infla√ß√£o e custos futuros

8. Recomenda√ß√µes Personalizadas
- Adaptar sugest√µes ao perfil do usu√°rio
- Considerar objetivos individuais
- Respeitar limites e restri√ß√µes
- Priorizar necessidades espec√≠ficas

Diretrizes de Comunica√ß√£o:
1. Seja claro e objetivo
2. Use linguagem acess√≠vel
3. Forne√ßa exemplos pr√°ticos
4. Explique os motivos das recomenda√ß√µes
5. Seja emp√°tico e compreensivo
6. Evite julgamentos
7. Mantenha o foco nas solu√ß√µes
8. Incentive bons h√°bitos financeiros

Ao analisar o contexto financeiro do usu√°rio, considere:
- Gastos mensais e limites
- Hist√≥rico de transa√ß√µes
- Progresso das metas
- Padr√µes de consumo
- Situa√ß√£o financeira geral
- Objetivos de curto e longo prazo

Lembre-se: Seu objetivo √© ajudar o usu√°rio a tomar melhores decis√µes financeiras e alcan√ßar seus objetivos.`;

export async function POST(req: NextRequest) {
  try {
    // Verifica o token de autentica√ß√£o
    const token = req.headers.get("authorization")?.split(" ")[1];
    if (!token) {
      return NextResponse.json(
        { error: "Token n√£o fornecido" },
        { status: 401 }
      );
    }

    const user = verifyToken(token);
    if (!user) {
      return NextResponse.json({ error: "Token inv√°lido" }, { status: 401 });
    }

    // Gera um novo token para renovar a sess√£o
    const newToken = generateToken(user);

    // Obt√©m os dados da requisi√ß√£o
    const { message, context, history } = await req.json();

    // Prepara o prompt com o contexto financeiro
    let prompt = `${BASE_PROMPT}\n\nContexto financeiro do usu√°rio:\n`;

    if (context.monthlySpending) {
      prompt += `- Gastos do m√™s: R$ ${context.monthlySpending.toFixed(2)}\n`;
    }

    if (context.monthlyLimit) {
      prompt += `- Limite mensal: R$ ${context.monthlyLimit.toFixed(2)}\n`;

      // Adiciona an√°lise do limite
      if (context.monthlySpending && context.monthlyLimit) {
        const percentageUsed =
          (context.monthlySpending / context.monthlyLimit) * 100;
        prompt += `- Utiliza√ß√£o do limite: ${percentageUsed.toFixed(1)}%\n`;

        if (percentageUsed > 90) {
          prompt += `‚ö†Ô∏è Alerta: Gastos pr√≥ximos do limite mensal\n`;
        } else if (percentageUsed > 100) {
          prompt += `‚ö†Ô∏è Alerta: Limite mensal excedido\n`;
        }
      }
    }

    if (context.goals?.length > 0) {
      prompt += `\nMetas:\n`;
      context.goals.forEach((goal: any) => {
        prompt += `- ${goal.title}: ${goal.progress.toFixed(1)}% conclu√≠do\n`;

        // Adiciona an√°lise da meta
        if (goal.progress < 25) {
          prompt += `  üìä Progresso inicial - Foco em estabelecer h√°bitos\n`;
        } else if (goal.progress < 75) {
          prompt += `  üìà Progresso consistente - Manter o ritmo\n`;
        } else {
          prompt += `  üéØ Meta pr√≥xima de ser alcan√ßada\n`;
        }
      });
    }

    if (context.recentTransactions?.length > 0) {
      prompt += `\nTransa√ß√µes recentes:\n`;

      // Agrupa transa√ß√µes por categoria
      const transactionsByCategory = context.recentTransactions.reduce(
        (acc: any, t: any) => {
          if (!acc[t.category]) {
            acc[t.category] = { total: 0, count: 0 };
          }
          acc[t.category].total += t.amount;
          acc[t.category].count++;
          return acc;
        },
        {}
      );

      // Adiciona an√°lise por categoria
      Object.entries(transactionsByCategory).forEach(
        ([category, data]: [string, any]) => {
          const average = data.total / data.count;
          prompt += `- ${category}: R$ ${data.total.toFixed(2)} (${
            data.count
          } transa√ß√µes, m√©dia R$ ${average.toFixed(2)})\n`;
        }
      );
    }

    // Adiciona o hist√≥rico da conversa
    if (history?.length > 0) {
      prompt += `\nHist√≥rico da conversa:\n`;
      history.forEach((msg: any) => {
        prompt += `${msg.role === "user" ? "Usu√°rio" : "Assistente"}: ${
          msg.content
        }\n`;
      });
    }

    // Adiciona a mensagem atual
    prompt += `\nUsu√°rio: ${message}\n\nAssistente:`;

    // Chama o modelo Gemini
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
    const result = await model.generateContent(prompt);
    const response = result.response;

    // Cria a resposta com o novo token no header
    const jsonResponse = NextResponse.json({
      response: response.text(),
      user,
    });
    jsonResponse.headers.set("x-new-token", newToken);

    return jsonResponse;
  } catch (error: any) {
    console.error("Erro no chat:", error);
    return NextResponse.json(
      { error: error.message || "Erro interno do servidor" },
      { status: error.status || 500 }
    );
  }
}
